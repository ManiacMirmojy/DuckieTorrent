angular.module("DuckieTorrent.torrent",[]).provider("uTorrent",function(){this.endpoints={pair:"http://localhost:%s/gui/pair",version:"http://localhost:%s/version/",ping:"http://localhost:%s/gui/pingimg",api:"http://localhost:%s/btapp/"};this.parsers={version:function(e){console.log("Found the port!!",e.data);return e.data}};this.getParser=function(e){return e in this.parsers?this.parsers[e]:function(e){return e.data}};this.getUrl=function(e,t){var n=this.endpoints[e];if(this.port!=null){n=n.replace("%s",this.port)}return n.replace("%s",encodeURIComponent(t))};this.currentPort=0;this.port=null;this.sessionKey=null;this.authToken=null;this.$get=function(e,t,n,r,i){var s=this;var o=function(r,i,o){var u=e.defer();i=angular.extend(i||{},{callback:"JSON_CALLBACK"});var a=n.build(s.getUrl(r),i);var f=s.getParser(r);t.jsonp(a,o||{}).then(function(e){u.resolve(f?f(e):e.data)},function(e){console.log("error fetching",r);u.reject(e)});return u.promise};var u={portScan:function(t){var n=e.defer();var r=function(){console.log("Next port!",t,s.currentPort);s.port=t[s.currentPort];s.jsonp("version").then(function(e){console.log("Portscan finished!",t[s.currentPort],e);n.resolve({port:t[s.currentPort],version:e})},function(e){console.log("Reject: ",t[s.currentPort]);if(s.currentPort<20){s.currentPort++;r()}else{n.reject("No active client found!")}})};r();return n.promise},setPort:function(e){s.port=e},pair:function(){return s.jsonp("pair",{},{timeout:6e4})},connect:function(e){return o("api",{pairing:e,type:"state",queries:'[["btapp"]]',hostname:window.location.host}).then(function(t){console.log("Retreived session key!",t);s.sessionKey=t.session;s.authToken=e;return t},function(t){console.error("Error starting session with auth token %s!",e)})},statusQuery:function(){return o("api",{pairing:s.authToken,session:s.sessionKey,type:"update",hostname:window.location.host}).then(function(e){if("error"in e){return{error:e}}e.map(function(e){var t=Object.keys(e)[0];var n=Object.keys(e[t].btapp)[0];var r;if(typeof e[t].btapp[n]=="string"){n="btappMethods";r=e[t].btapp}else{r="all"in e[t].btapp[n]?e[t].btapp[n].all:e[t].btapp[n];if(!("all"in e[t].btapp[n]))n+="Methods"}i.handleEvent(t,n,r,u.RPC)});return e},function(e){console.error("Error executing get status query!",e)})},getRemote:function(){return i},RPC:function(e,t){p=e.split(".");console.debug("Path:",p);if(!t)t=[];return o("api",{pairing:s.authToken,session:s.sessionKey,type:"function",path:[p],args:"[]",hostname:window.location.host})},attachEvents:function(){}};return u}}).factory("RPCCallService",function(){var e={validateArguments:function(e,t){if(typeof e!=="string"){console.error("Expected functionValue to be a string",e,typeof e,t);return false}var n=e.match(/\(.*?\)/g);return n.filter(function(e){e=e.match(/\w+/g)||[];return e.length===t.length&&e.map(function(e,n){if(typeof t[n]==="undefined"){throw"client functions do not support undefined arguments"}else if(typeof t[n]==="null"){return true}switch(e){case"number":case"string":case"boolean":return typeof t[n]===e;case"unknown":return true;case"array":return typeof t[n]==="object";case"dispatch":return typeof t[n]==="object"||typeof t[n]==="function";default:throw"there is an invalid type in the function signature exposed by the client"}})})},convertCallbackFunctionArgs:function(t){t.map(function(n,r){if(typeof n==="function"){t[r]=e.storeCallbackFunction(n)}else if(typeof n==="object"&&n){e.convertCallbackFunctionArgs(n)}},this)},storeCallbackFunction:function(e){console.log("Create a callback function for ",e);e=e||function(){};var t="bt_"+(new Date).getTime();this.btappCallbacks[t]=e;return t},call:function(t,n,r,i){console.log("Trying to call RPC function: ",t,n,r);if(!e.validateArguments.call(e,n,r)){console.error("Arguments do not match signature!",r,n,t);throw"arguments do not match any of the function signatures exposed by the client"}e.convertCallbackFunctionArgs(r);console.log("Calling RPC Function!",t,n,r);return i(t,r)}};return e}).factory("TorrentRemote",function(e,t){var n=function(e,t,n){var r={};for(var i in t){this[i]=this.isRPCFunctionSignature(t[i])?this.createFunction(e,i,t[i],n):t[i]}};n.prototype={getFormattedStatus:function(){var e={136:"stopped",137:"started",152:"Error: Files missing, please recheck",201:"downloading",233:"paused"};if(!(this.properties.all.status in e)){console.error("There's an unknown status for this torrent!",this.properties.all.status,this);return this.properties.all.status}return e[this.properties.all.status]},getStarted:function(){return e("properties.all.added_on")(this)},getProgress:function(){var t=e("properties.all.progress")(this);return t?t/10:t},getFiles:function(){var t=[];angular.forEach(e("file.all")(this),function(e,n){t.push(e)});return t},isStarted:function(){return this.properties.status%2===1},isRPCFunctionSignature:function(e){return typeof e==="string"&&(e.match(/\[native function\](\([^\)]*\))+/)||e.match(/\[nf\](\([^\)]*\))+/))},createFunction:function(e,n,r,i){e="btapp."+e+"."+n;var n=function(){var n,s=[];for(n=0;n<arguments.length;n++){s.push(arguments[n])}return t.call(e,r,s,i)};n.valueOf=function(){return"function"+signatures.substring(4)+" (returns promise)"};return n}};var r={torrents:{},settings:{},getNameFunc:null,getTorrentName:function(t){if(!r.getNameFunc){r.getNameFunc=e("properties.all.name")}return r.getNameFunc(t)},addEvent:function(e){console.log("Add to list: ",e);this.torrents[e.hash]=e},removeEvent:function(e){console.log("Remove from list: ",e)},addSettings:function(e){console.log("Add Settings!",e)},getTorrents:function(){var e=[];angular.forEach(r.torrents,function(t){e.push(t)});return e},addTorrent:function(e,t){var r=Object.keys(e)[0];if(r in this.torrents){Object.deepMerge(this.torrents[r],e[r]);console.log("Torrent updated! ",this.torrents[r],e[r])}else{this.torrents[r]=new n("torrent.all."+r,e[r],t)}},addEvents:function(e){console.info("Add events!",e)},addRss:function(e){console.log("Add RSS!",e)},addTrackerMethods:function(e){console.log("Add Tracker Methods!",e)},addRsaMethods:function(e){console.log("Add RSA Methods!",e)},addStash:function(e){console.log("Add stash!",e)},addRssMethods:function(e){console.log("Add RSS Methods: ",e)},addBtappMethods:function(e){console.log("Add BTAPP Methods: ",e)},addOsMethods:function(e){console.log("Add BTAPP Methods: ",e)},addAddMethods:function(e){console.log("Add Add Methods: ",e)},addDhtMethods:function(e){console.log("Add DHT Methods: ",e)},addTorrentMethods:function(e){console.log("Add Torrent Methods!",e)},addStream:function(e){console.log("Add stream!",e)},handleEvent:function(e,t,n,r){if(!(e+String.capitalize(t)in this)){console.error("Method not implemented: "+e+t.capitalize(),n)}else{this[e+String.capitalize(t)](n,r)}}};return r}).provider("URLBuilder",function(){function e(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,t?"%20":"+")}function t(t,n){if(!n)return t;var r=[];angular.forEach(n,function(t,n){if(t===null||angular.isUndefined(t))return;if(!angular.isArray(t))t=[t];angular.forEach(t,function(t){if(angular.isObject(t)){t=angular.toJson(t)}r.push(e(n)+"="+e(t))})});return t+(t.indexOf("?")==-1?"?":"&")+r.join("&")}this.$get=function(){return{build:function(e,n){return t(e,n)}}}})